SRTF

#include <stdio.h>
int main()
{
    int arrival_time[10], burst_time[10], t[10], wait_time[10], tat[10];
    int i, small, count=0, time, n;
    float _wait_time_ = 0, _tat_ = 0, end;

    printf("Enter Number of Processes: ");
    scanf("%d", &n);
    printf("\nEnter Details of %d Processes", n);
    for(i=0;i <n;i++)
    {
        printf("\nEnter Arrival Time: ");
        scanf("%d", &arrival_time[i]);
        printf("Enter Burst Time: ");   
        scanf("%d", &burst_time[i]); 
        t[i] = burst_time[i];
    }
    burst_time[9] = 9999;
    for(time=0;count!=n;time++)
	{
        small = 9;
        for(i=0;i<n;i++)
		{
            if(arrival_time[i] <= time && burst_time[i] < burst_time[small] && burst_time[i] > 0)
                small = i;
        }
        burst_time[small]--;
        if(burst_time[small] == 0)
		{
            count++;
            end = time + 1;
            _wait_time_ = _wait_time_ + end - arrival_time[small] - t[small];
            _tat_ = _tat_ + end - arrival_time[small];
            wait_time[small] = end - arrival_time[small] - t[small];
            tat[small] = end -arrival_time[small];
        }
    }
    printf("\nProcess  Burst Time    Waiting Time      Turnaround Time\n");
    for(i=0;i<n;i++)
	{
        printf(" P%d        %d             %d             		%d\n" ,i+1, t[i], wait_time[i], tat[i]);
    }
    printf("\nAverage Waiting Time: %0.3f\n", _wait_time_/n);
    printf("Average Turnaround Time: %0.3f\n", _tat_/n);
    return 0;
}


SJF

#include<stdio.h>
int main()
{
	int n;
	printf("Enter number of processes: \n");
	scanf("%d", &n);
	int arrival_time[n], burst_time[n], process[n], service_time[n], i, j;
	printf("\nEnter burst time: \n");
	for(i=0;i<n;i++)
	{
		printf("P%d: ", i+1);
		scanf("%d", &burst_time[i]);
		process[i] = i+1;
	}
	printf("\nEnter arrival time: \n");
	for(i =0;i<n;i++)
	{
		printf("P%d: ", i+1);
		scanf("%d", &arrival_time[i]);
		process[i] = i+1;
	}
	service_time[0] = 0;
	int completion = burst_time[0], t;
	for(i=0;i<n;i++)
	{
		for(j=1;j<n-i-1; j++)
			if(burst_time[j] > burst_time[j+1] && arrival_time[j] <= completion)
			{
				t = burst_time[j];
				burst_time[j] = burst_time[j+1];
				burst_time[j+1] = t;

				t = arrival_time[j];
				arrival_time[j] = arrival_time[j+1];
				arrival_time[j+1] = t;

				t = process[j];
				process[j] = process[j+1];
				process[j+1] = t;

			} 
	}
	
	for(i=1;i<n;i++)	
		service_time[i] = service_time[i-1] + burst_time[i-1];
		
	printf("\nProcess    Arrival Time   Burst Time   Service Time\n");
	for(i=0;i<n;i++)
		printf("P%d\t\t%d\t\t%d\t\t%d\n", process[i], arrival_time[i], burst_time[i], service_time[i]);	
	
	float avg_wait_time = 0.0; 
	for(i=0; i<n; i++)
	{
		avg_wait_time += (service_time[i] - arrival_time[i]);
	}
	avg_wait_time = avg_wait_time / n;

	printf("\nAverage Wait Time = %f\n", avg_wait_time);
	return 0;
}
